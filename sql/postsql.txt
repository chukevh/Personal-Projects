\l
- list databases

CREATE DATABASE [name];
creates database

DROP DATABASE [name];
-deletes database

\c [name]
-connects to database

\d
-list table

\du
-list all users

python "C:\Users\Rising Edge\Desktop\coding\javascript\number.py"

//CREATE TABLES
CREATE TABLE person (
id INT,
first_name VARCHAR(50),
last_name VARCHAR(50),
gender VARCHAR(7),
date_of_birth DATE );

CREATE TABLE person(
id BIGSERIAL NOT NULL PRIMARY KEY,
first_name VARCHAR(50) NOT NULL,
last_name VARCHAR(50) NOT NULL,
gender VARCHAR(7) NOT NULL,
date_of_birth DATE NOT NULL,
email VARCHAR(150));

// INSERT FILES
\i 'C:/Users/Kevin/Desktop/Personal-Projects/sql/car.sql'
\i 'C:/Users/Kevin/Desktop/Personal-Projects/sql/person.sql'
\i 'C:/Users/Kevin/Desktop/Personal-Projects/sql/person-car.sql'

INSERT INTO person (first_name, last_name, gender, date_of_birth)
VALUES ('Erica', 'Xiang', 'FEMALE', date '1995-10-30');
INSERT INTO person (first_name, last_name, gender, date_of_birth, email)
VALUES ('Kevin', 'Chu', 'MALE', date '1996-05-20', 'kevin.chu@gmail.com');

SELECT first_name FROM person;
SELECT * FROM person ORDER BY last_name DESC;
SELECT DISTINCT country_of_birth FROM person ORDER BY country_of_birth;
SELECT * FROM person WHERE gender = 'Male' AND country_of_birth = 'Vietnam' OR country_of_birth = 'China';

// COMPARISONS
SELECT 1 <= 2;
SELECT 1 <> 2; //isnot equal

// SELECT USING LMIITS
SELECT * FROM person OFFSET 5 LIMIT 5;
SELECT * FROM person OFFSET 5 FETCH FIRST ROW ONLY;
SELECT * FROM person WHERE country_of_birth IN ('China', 'Vietnam', 'France');

// SELECT NORMAL
SELECT * FROM person WHERE date_of_birth BETWEEN '1989-1-1' AND '2015-1-1';
SELECT * FROM person WHERE email LIKE '%@google%';
SELECT * FROM person WHERE country_of_birth LIKE 'V%';
SELECT * FROM person WHERE country_of_birth ILIKE 'v%'; //ignores casing

SELECT country_of_birth, COUNT(*) FROM person GROUP BY country_of_birth HAVING COUNT(*) > 5 ORDER BY country_of_birth;

SELECT MAX(price) FROM car;
SELECT MIN(price) FROM car;
SELECT ROUND(AVG(price)) FROM car;
SELECT SUM(price) FROM car;

SELECT make, model, MIN(price) FROM car GROUP BY make, model;
SELECT make, MAX(price) FROM car GROUP BY make;

// SQL MATHS
SELECT 15 * 2;
SELECT factorial(5);
SELECT 15 % 4;

// COALESCE
SELECT make, model, price, round(price / 10,2) AS ten_percent FROM car;
SELECT COALESCE(email, 'Email not provided') FROM person;


NULLIF(1,2); //returns 1
NULLIF(1,1); //returns null

// SQL TIME FUNCTIONS
SELECT NOW();
SELECT NOW()::DATE;
SELECT NOW()::TIME;
SELECT NOW() - INTERVAL '1 YEAR';
SELECT NOW() - INTERVAL '10 MONTHS';

SELECT first_name, last_name, email, gender, country_of_birth, date_of_birth, (NOW()::DATE-date_of_birth)/365 AS age FROM person;

SELECT first_name, last_name, email, gender, country_of_birth, date_of_birth, AGE(NOW(),date_of_birth) FROM person;

//ALTER CONSTRAINTS
ALTER TABLE person DROP CONSTRAINT person_pkey;
ALTER TABLE person ADD PRIMARY KEY (id);
ALTER TABLE person ADD CONSTRAINT unique_email_address UNIQUE (email);


DELETE FROM person WHERE id = 1;

SELECT * FROM person WHERE first_name = 'Carny';

ALTER TABLE person ADD CONSTRAINT gender_constraint CHECK (gender = 'Female' OR gender = 'Male');

UPDATE person SET email = 'chukevh@gmail.com', first_name = 'Kevin', last_name = 'Chu' WHERE id = 1;

insert into person (id, first_name, last_name, email, gender, date_of_birth, country_of_birth) values (2001, 'Kevin', 'Chu', 'chukevh@gmail.com', 'Male', '18-05-2015', 'United States')
ON CONFLICT (id) DO UPDATE SET email = EXCLUDED.email;

\x // EXTENDED view